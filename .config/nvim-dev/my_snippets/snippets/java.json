{
	"FastIO": {
		"prefix": "java_fast",
		"body": [
		  "import java.io.BufferedReader;",
		  "import java.io.IOException;",
		  "import java.io.InputStreamReader;",
		  "import java.io.PrintWriter;",
		  "import java.util.StringTokenizer;",
		  "",
		  "public class test {",
		  "",
		  "\tpublic static void main(String[] args) {",
		  "\t\tPrintWriter out = new PrintWriter(System.out);",
		  "\t\tFastScanner fs=new FastScanner();",
		  "\t\tint T=fs.nextInt();",
		  "\t\tfor (int tt=0; tt<T; tt++) {",
		  "\t\t\t",
		  "\t\t}",
		  "\t\tout.close();",
		  "\t}",
		  "\t",
		  "\tstatic class FastScanner {",
		  "\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));",
		  "\t\tStringTokenizer st=new StringTokenizer(\"\");",
		  "\t\tString next() {",
		  "\t\t\twhile (!st.hasMoreTokens())",
		  "\t\t\t\ttry {",
		  "\t\t\t\t\tst=new StringTokenizer(br.readLine());",
		  "\t\t\t\t} catch (IOException e) {",
		  "\t\t\t\t\te.printStackTrace();",
		  "\t\t\t\t}",
		  "\t\t\treturn st.nextToken();",
		  "\t\t}",
		  "\t\t",
		  "\t\tint nextInt() {",
		  "\t\t\treturn Integer.parseInt(next());",
		  "\t\t}",
		  "\t\tint[] readIntArray(int n) {",
		  "\t\t\tint[] a=new int[n];",
		  "\t\t\tfor (int i=0; i<n; i++) a[i]=nextInt();",
		  "\t\t\treturn a;",
		  "\t\t}",
		  "\t\tlong[] readLongArray(int n){",
		  "\t\t\tlong[] a=new long[n];",
		  "\t\t\tfor(int i=0; i<n; i++) a[i]=nextLong();",
		  "\t\t\treturn a;",
		  "\t\t}",
		  "\t\tlong nextLong() {",
		  "\t\t\treturn Long.parseLong(next());",
		  "\t\t}",
		  "\t}",
		  "\t",
		  "}"
		],
		"description": "FastIO"
	},
	"FileIO": {
		"prefix": "java_file",
		"body": [
		  "import java.io.FileInputStream;",
		  "import java.io.FileOutputStream;",
		  "import java.io.PrintStream;",
		  "import java.util.Scanner;",
		  "",
		  "class test {",
		  "\tstatic final String INPUT = \"io/input.txt\";",
		  "\tstatic final String OUTPUT = \"io/output.txt\";",
		  "",
		  "\tpublic static Scanner setIO() {",
		  "\t\t// Defining FileInputStream and PrintStream objects",
		  "\t\tFileInputStream instream = null;",
		  "\t\tPrintStream outstream = null;",
		  "",
		  "\t\ttry {",
		  "\t\t\tinstream = new FileInputStream(INPUT);",
		  "\t\t\toutstream = new PrintStream(new FileOutputStream(OUTPUT));",
		  "\t\t\tSystem.setIn(instream);",
		  "\t\t\tSystem.setOut(outstream);",
		  "\t\t} catch (Exception e) {",
		  "\t\t\tSystem.out.println(\"Error occurred = \" + e);",
		  "\t\t}",
		  "",
		  "\t\tScanner input = new Scanner(System.in);",
		  "\t\treturn input;",
		  "\t}",
		  "",
		  "\tpublic static void main(String[] args) {",
		  "\t\tScanner input = setIO();",
		  "",
		  "\t\tint T = input.nextInt();",
		  "\t\tfor (int tt = 0; tt < T; tt++) {",
		  "",
		  "\t\t}",
		  "",
		  "\t\treturn;",
		  "\t}",
		  "}"
		],
		"description": "FileIO"
	},
	"for": {
		"prefix": "fr",
		"body": ["for(${4:int} ${1:element} = ${2:start}; ${1:element} < ${3:size}; ${1:element}++)", "{", "\t${5}", "}"],
		"description": "for"
	},
	"for equals": {
		"prefix": "fre",
		"body": ["for(${4:int} ${1:element} = ${2:start}; ${1:element} <= ${3:size}; ${1:element}++)", "{", "\t${5}", "}"],
		"description": "for equals"
	},
	"reverse for": {
		"prefix": "rfr",
		"body": ["for (${3:int} ${1:element} = ${2:size} - 1; ${1:element} >= 0; ${1:element}--)", "{", "\t${4}", "}"],
		"description": "reverse for"
	},
	"reverse for equals": {
		"prefix": "rfre",
		"body": ["for (${3:int} ${1:element} = ${2:size}; ${1:element} >= 1; ${1:element}--)", "{", "\t${4}", "}"],
		"description": "reverse for equals"
	}
}
