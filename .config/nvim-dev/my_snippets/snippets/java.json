{
	"FastIO": {
		"prefix": "java_fast",
		"body": [
		  "import java.io.BufferedReader;",
		  "import java.io.IOException;",
		  "import java.io.InputStreamReader;",
		  "import java.io.PrintWriter;",
		  "import java.util.StringTokenizer;",
		  "",
		  "public class test {",
		  "",
		  "    public static void main(String[] args) {",
		  "        PrintWriter out = new PrintWriter(System.out);",
		  "        FastScanner fs=new FastScanner();",
		  "        int T=fs.nextInt();",
		  "        for (int tt=0; tt<T; tt++) {",
		  "            ",
		  "        }",
		  "        out.close();",
		  "    }",
		  "    ",
		  "    static class FastScanner {",
		  "        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));",
		  "        StringTokenizer st=new StringTokenizer(\"\");",
		  "        String next() {",
		  "            while (!st.hasMoreTokens())",
		  "                try {",
		  "                    st=new StringTokenizer(br.readLine());",
		  "                } catch (IOException e) {",
		  "                    e.printStackTrace();",
		  "                }",
		  "            return st.nextToken();",
		  "        }",
		  "        ",
		  "        int nextInt() {",
		  "            return Integer.parseInt(next());",
		  "        }",
		  "        int[] readIntArray(int n) {",
		  "            int[] a=new int[n];",
		  "            for (int i=0; i<n; i++) a[i]=nextInt();",
		  "            return a;",
		  "        }",
		  "        long[] readLongArray(int n){",
		  "            long[] a=new long[n];",
		  "            for(int i=0; i<n; i++) a[i]=nextLong();",
		  "            return a;",
		  "        }",
		  "        long nextLong() {",
		  "            return Long.parseLong(next());",
		  "        }",
		  "    }",
		  "    ",
		  "}"
		],
		"description": "FastIO"
	},
	"FileIO": {
		"prefix": "java_file",
		"body": [
		  "import java.io.FileInputStream;",
		  "import java.io.FileOutputStream;",
		  "import java.io.PrintStream;",
		  "import java.util.Scanner;",
		  "",
		  "class test {",
		  "    static final String INPUT = \"io/input.txt\";",
		  "    static final String OUTPUT = \"io/output.txt\";",
		  "",
		  "    public static Scanner setIO() {",
		  "        // Defining FileInputStream and PrintStream objects",
		  "        FileInputStream instream = null;",
		  "        PrintStream outstream = null;",
		  "",
		  "        try {",
		  "            instream = new FileInputStream(INPUT);",
		  "            outstream = new PrintStream(new FileOutputStream(OUTPUT));",
		  "            System.setIn(instream);",
		  "            System.setOut(outstream);",
		  "        } catch (Exception e) {",
		  "            System.out.println(\"Error occurred = \" + e);",
		  "        }",
		  "",
		  "        Scanner input = new Scanner(System.in);",
		  "        return input;",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        Scanner input = setIO();",
		  "",
		  "        int T = input.nextInt();",
		  "        for (int tt = 0; tt < T; tt++) {",
		  "",
		  "        }",
		  "",
		  "        return;",
		  "    }",
		  "}"
		],
		"description": "FileIO"
	},
	"for": {
		"prefix": "fr",
		"body": ["for(${4:int} ${1:element} = ${2:start}; ${1:element} < ${3:size}; ${1:element}++)", "{", "    ${5}", "}"],
		"description": "for"
	},
	"for equals": {
		"prefix": "fre",
		"body": ["for(${4:int} ${1:element} = ${2:start}; ${1:element} <= ${3:size}; ${1:element}++)", "{", "    ${5}", "}"],
		"description": "for equals"
	},
	"reverse for": {
		"prefix": "rfr",
		"body": ["for (${3:int} ${1:element} = ${2:size} - 1; ${1:element} >= 0; ${1:element}--)", "{", "    ${4}", "}"],
		"description": "reverse for"
	},
	"reverse for equals": {
		"prefix": "rfre",
		"body": ["for (${3:int} ${1:element} = ${2:size}; ${1:element} >= 1; ${1:element}--)", "{", "    ${4}", "}"],
		"description": "reverse for equals"
	}
}
